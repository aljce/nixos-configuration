#!/usr/bin/env bash
set -e

DISK="$1"

while true; do
    read -p "Is the firmware [B]IOS or [U]EFI: " B_OR_U
    case $B_OR_U in
        [Bb] | [Bb][Ii][Oo][Ss] ) FIRMWARE=BIOS; break;;
        [Uu] | [Uu][Ee][Ff][Ii] ) FIRMWARE=UEFI; break;;
        * ) echo "Please enter B or U";;
    esac
done

parted $DISK mklabel gpt
INDEX=1
PARTITION=1
if [ $FIRMWARE == BIOS ]; then
    parted -s $DISK mkpart primary fat32 "$INDEX"MiB"" "$((INDEX + 1))MiB"
    INDEX=$((INDEX + 1))
    parted -s $DISK set $PARTITION bios_grub on
    parted -s $DISK name $PARTITION Grub
    PARTITION=$((PARTITION + 1))
fi
parted -s $DISK mkpart primary fat32 "$INDEX"MiB"" "$((INDEX + 512))MiB"
INDEX=$((INDEX + 512))
parted -s $DISK set $PARTITION boot on
parted -s $DISK name $PARTITION Boot
BOOT_PART="$DISK$PARTITION"
PARTITION=$((PARTITION + 1))
parted -s $DISK mkpart primary ext4 "$INDEX"MiB"" 100%
parted -s $DISK name $PARTITION Root
ROOT_PART="$DISK$PARTITION"

mkfs.vfat -F32 -n BOOT $BOOT_PART

cryptsetup luksFormat $ROOT_PART
cryptsetup open --type luks $ROOT_PART root

zpool create -o ashift=12 -o altroot=/mnt -O compression=lz4 rpool $ROOT_PART
zfs create -o mountpoint=legacy rpool/root
zfs create -o mountpoint=legacy rpool/home
zfs create -o mountpoint=legacy rpool/nix

mkdir -p /mnt
mount -t zfs rpool/root /mnt
mkdir /mnt/{home,nix,boot}
mount -t zfs rpool/home /mnt/home
mount -t zfs rpool/nix  /mnt/nix
mount        $BOOT_PART /mnt/boot

nixos-generate-config --root /mnt
